// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id         Int         @id @default(autoincrement())
  agreements Agreement[]
  email      String      @unique
  password   String?
  first_name String?
  last_name  String?
  updated_at DateTime    @default(now()) @updatedAt
  created_at DateTime    @default(now())

  @@map("customers")
}

model Schedule {
  id             Int        @id @default(autoincrement())
  service_id     Int
  service        Service    @relation(fields: [service_id], references: [id], onDelete: Cascade)
  day            String
  day_hour_start String
  day_hour_end   String?
  updated_at     DateTime   @default(now()) @updatedAt
  created_at     DateTime   @default(now())
  Agreement      Agreement?

  @@map("schedules")
}

model Agreement {
  id             Int             @id @default(autoincrement())
  schedule_id    Int             @unique
  customer_id    Int
  schedule       Schedule        @relation(fields: [schedule_id], references: [id], onDelete: Cascade)
  customer       Customer        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  updated_at     DateTime        @default(now()) @updatedAt
  created_at     DateTime        @default(now())
  AgreementsInfo AgreementsInfo?

  @@map("agreements")
}

model AgreementsInfo {
  id           Int        @id @default(autoincrement())
  agreement_id Int        @unique
  agreement    Agreement? @relation(fields: [agreement_id], references: [id])
  updated_at   DateTime   @default(now()) @updatedAt
  created_at   DateTime   @default(now())

  @@map("agreements_info")
}

model Service {
  id                  Int               @id @default(autoincrement())
  service_provider_id Int
  service_provider    ServiceProvider   @relation(fields: [service_provider_id], references: [id], onDelete: Cascade)
  schedules           Schedule[]
  title               String
  description         String
  min_price           String?
  max_price           String?
  updated_at          DateTime          @default(now()) @updatedAt
  created_at          DateTime          @default(now())
  LocationService     LocationService[]

  @@map("services")
}

model LocationService {
  id          Int      @id @default(autoincrement())
  service_id  Int
  service     Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  title       String
  description String
  min_price   String?
  max_price   String?
  updated_at  DateTime @default(now()) @updatedAt
  created_at  DateTime @default(now())

  @@map("location_services")
}

model ServiceProvider {
  id         Int       @id @default(autoincrement())
  services   Service[]
  first_name String?
  last_name  String?
  nickname   String
  email      String    @unique
  password   String
  updated_at DateTime  @default(now()) @updatedAt
  created_at DateTime  @default(now())

  @@map("service_providers")
}

model Session {
  id         Int      @id @default(autoincrement())
  db_user_id Int
  valid      Boolean  @default(true)
  updated_at DateTime @default(now()) @updatedAt
  created_at DateTime @default(now())

  @@map("sessions")
}
